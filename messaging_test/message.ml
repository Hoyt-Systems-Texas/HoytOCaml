(************************************************)
(*       AUTOGENERATED FILE - DO NOT EDIT!      *)
(************************************************)
(* Generated by: ocaml-protoc-plugin            *)
(* https://github.com/issuu/ocaml-protoc-plugin *)
(************************************************)
(*
   Source: message.proto
   Syntax: proto3 
   Parameters:
     debug=false
     annot=''
     opens=[]
     int64_as_int=false
     int32_as_int=false
     fixed_as_int=false
     singleton_record=false
*)

open Ocaml_protoc_plugin.Runtime [@@warning "-33"]
module rec SystemMessage : sig
  type t = Heartbeat 
  val to_int: t -> int
  val from_int: int -> (t, [> Runtime'.Result.error]) result
end = struct 
  type t = Heartbeat 
  let to_int = function
    | Heartbeat -> 0
  
  let from_int = function
    | 0 -> Ok Heartbeat
    | n -> Error (`Unknown_enum_value n)
  
end
and UserMessage : sig
  type t = CreateUser 
  val to_int: t -> int
  val from_int: int -> (t, [> Runtime'.Result.error]) result
end = struct 
  type t = CreateUser 
  let to_int = function
    | CreateUser -> 0
  
  let from_int = function
    | 0 -> Ok CreateUser
    | n -> Error (`Unknown_enum_value n)
  
end
and OrganizationMessage : sig
  type t = CreateOrganization 
  val to_int: t -> int
  val from_int: int -> (t, [> Runtime'.Result.error]) result
end = struct 
  type t = CreateOrganization 
  let to_int = function
    | CreateOrganization -> 0
  
  let from_int = function
    | 0 -> Ok CreateOrganization
    | n -> Error (`Unknown_enum_value n)
  
end
and PayloadType : sig
  val name': unit -> string
  type t = [ `not_set | `System of SystemMessage.t | `User of UserMessage.t | `Organization of OrganizationMessage.t ] 
  val to_proto: t -> Runtime'.Writer.t
  val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
end = struct 
  let name' () = "message.PayloadType"
  type t = [ `not_set | `System of SystemMessage.t | `User of UserMessage.t | `Organization of OrganizationMessage.t ]
  let to_proto =
    let apply = fun ~f a -> f [] a in
    let spec = Runtime'.Serialize.C.( oneof ((function | `not_set -> failwith "This case should never _ever_ happen" | `System v -> oneof_elem (1, (enum SystemMessage.to_int), v) | `User v -> oneof_elem (2, (enum UserMessage.to_int), v) | `Organization v -> oneof_elem (3, (enum OrganizationMessage.to_int), v))) ^:: nil ) in
    let serialize = Runtime'.Serialize.serialize [] (spec) in
    fun t -> apply ~f:serialize t
  
  let from_proto =
    let constructor = fun _extensions a -> a in
    let spec = Runtime'.Deserialize.C.( oneof ([ oneof_elem (1, (enum SystemMessage.from_int), fun v -> `System v); oneof_elem (2, (enum UserMessage.from_int), fun v -> `User v); oneof_elem (3, (enum OrganizationMessage.from_int), fun v -> `Organization v) ]) ^:: nil ) in
    let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
    fun writer -> deserialize writer |> Runtime'.Result.open_error
  
end
and Header : sig
  module rec MessageType : sig
    type t = PING | PONG | REQ | REPLY | EVENT | STATUS 
    val to_int: t -> int
    val from_int: int -> (t, [> Runtime'.Result.error]) result
  end
  and Status : sig
    type t = NA | Success | Error | Busy | Invalid | Timeout 
    val to_int: t -> int
    val from_int: int -> (t, [> Runtime'.Result.error]) result
  end
  val name': unit -> string
  type t = { fromId: int32; toId: int32; correlationId: int64; userId: int64; organizationId: int32; messageType: Header.MessageType.t; payloadType: PayloadType.t option; status: Header.Status.t } 
  val to_proto: t -> Runtime'.Writer.t
  val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
end = struct 
  module rec MessageType : sig
    type t = PING | PONG | REQ | REPLY | EVENT | STATUS 
    val to_int: t -> int
    val from_int: int -> (t, [> Runtime'.Result.error]) result
  end = struct 
    type t = PING | PONG | REQ | REPLY | EVENT | STATUS 
    let to_int = function
      | PING -> 0
      | PONG -> 1
      | REQ -> 2
      | REPLY -> 3
      | EVENT -> 4
      | STATUS -> 5
    
    let from_int = function
      | 0 -> Ok PING
      | 1 -> Ok PONG
      | 2 -> Ok REQ
      | 3 -> Ok REPLY
      | 4 -> Ok EVENT
      | 5 -> Ok STATUS
      | n -> Error (`Unknown_enum_value n)
    
  end
  and Status : sig
    type t = NA | Success | Error | Busy | Invalid | Timeout 
    val to_int: t -> int
    val from_int: int -> (t, [> Runtime'.Result.error]) result
  end = struct 
    type t = NA | Success | Error | Busy | Invalid | Timeout 
    let to_int = function
      | NA -> 0
      | Success -> 1
      | Error -> 2
      | Busy -> 3
      | Invalid -> 4
      | Timeout -> 5
    
    let from_int = function
      | 0 -> Ok NA
      | 1 -> Ok Success
      | 2 -> Ok Error
      | 3 -> Ok Busy
      | 4 -> Ok Invalid
      | 5 -> Ok Timeout
      | n -> Error (`Unknown_enum_value n)
    
  end
  let name' () = "message.Header"
  type t = { fromId: int32; toId: int32; correlationId: int64; userId: int64; organizationId: int32; messageType: Header.MessageType.t; payloadType: PayloadType.t option; status: Header.Status.t }
  let to_proto =
    let apply = fun ~f:f' { fromId; toId; correlationId; userId; organizationId; messageType; payloadType; status } -> f' [] fromId toId correlationId userId organizationId messageType payloadType status in
    let spec = Runtime'.Serialize.C.( basic (1, int32, proto3) ^:: basic (2, int32, proto3) ^:: basic (4, int64, proto3) ^:: basic (5, int64, proto3) ^:: basic (6, int32, proto3) ^:: basic (7, (enum Header.MessageType.to_int), proto3) ^:: basic_opt (8, (message (fun t -> PayloadType.to_proto t))) ^:: basic (9, (enum Header.Status.to_int), proto3) ^:: nil ) in
    let serialize = Runtime'.Serialize.serialize [] (spec) in
    fun t -> apply ~f:serialize t
  
  let from_proto =
    let constructor = fun _extensions fromId toId correlationId userId organizationId messageType payloadType status -> { fromId; toId; correlationId; userId; organizationId; messageType; payloadType; status } in
    let spec = Runtime'.Deserialize.C.( basic (1, int32, proto3) ^:: basic (2, int32, proto3) ^:: basic (4, int64, proto3) ^:: basic (5, int64, proto3) ^:: basic (6, int32, proto3) ^:: basic (7, (enum Header.MessageType.from_int), proto3) ^:: basic_opt (8, (message (fun t -> PayloadType.from_proto t))) ^:: basic (9, (enum Header.Status.from_int), proto3) ^:: nil ) in
    let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
    fun writer -> deserialize writer |> Runtime'.Result.open_error
  
end